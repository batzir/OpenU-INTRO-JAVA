
/**
 * This class represents a three-dimensional point the x,y and z coordinate values can get either negative, positive or zero double values.
 * @author (Bat-Zion Rafailov)
 * @version (6.4.19)
 */
public class Point3D
{
    // instance variables
    private double _x;
    private double _y;
    private double _z;
    /**
     * 
     * Constructs and initializes a Point3D from the specified xyz coordinates.
     *  @param   given x coordinate
     *  @param   given y coordinate
     *  @param   given z coordinate
     */
    public Point3D(double x, double y, double z){
        _x = x;
        _y = y;
        _z = z;
    }

    /**
     *
     * Default constructs and initializes a Point3D to (0.0,0.0,0.0).
     */
    public Point3D()
    {
        _x = 0.0;
        _y = 0.0;
        _z = 0.0;
    }

    /**
     * 
     * Constructs and initializes a Point3D from the specified Point3D
     * @param   other the Point3D which the new instance initialization will be based on
     */
    public Point3D(Point3D other){
        _x = other.getX();
        _y = other.getY();
        _z = other.getZ();
    }

    /**
     * This method returns the x coordinate
     * @return  the x coordinate
     */
    public double getX(){
        return _x;
    }

    /**
     * This method sets the x coordinate to the given x
     * @param   given x coordinate
     */
    public void setX(double x){
        this._x = x;
    } 

    /**
     * This method returns the y coordinate
     * @return  the y coordinate
     */
    public double getY(){
        return _y;
    }

    /**
     * This method sets the y coordinate to the given y
     * @param   given y coordinate
     */
    public void setY(double y){
        this._y = y;
    }

    /**
     * This method returns the z coordinate
     * @return  the z coordinate
     */
    public double getZ(){
        return _z;
    }

    /**
     * This method sets the z coordinate to the given z
     * @param   given z coordinate
     */
    public void setZ(double z){
        this._z = z;
    }

    /**
     * This method returns a string representation of this Point3D
     * @return  the coordinate of Point3D
     */
    public String toString(){
        return "("+ _x + "," + _y + "," + _z + ")";
    }

    /**
     * This method determines whether or not two points are equal 
     * @param   other a Point3D object to be compared with this Point3D
     * @return  true if this point is equal to the other point, false otherwise
     */
    public boolean equals(Point3D other){
        if (_x == other.getX() && _y == other.getY() && _z == other.getZ()){
            return  true;
        }
        return  false;        
    }

    /**
     * This method checks if this point is above the other point
     * @param   other the point to check whether this point is above it
     * @return   true if this point is above the other point, false otherwise
     */
    public boolean isAbove(Point3D other){
        if (_z > other.getZ()){
            return true;  
        }
        return false;
    }

    /**
     * This method checks if this point is under the other point
     * @param   other the point to check whether this point is under it
     * @return  true if this point is under the other point, false otherwise
     */
    public boolean isUnder(Point3D other){   
        if (_z < other.getZ()){
            return true;  
        }
        return false;   
    }

    /**
     * This method checks if this point is left to the other point
     * @param   other  the point to check whether this point is left of it
     * @return true if this point is left to the other point, false otherwise
     */  
    public boolean isLeft(Point3D other){
        if (_y < other.getY()){
            return true; 
        }
        return false;
    }

    /**
     * This method checks if this point is right to the other point
     * @param   other  the point to check whether this point is right of it
     * @return true if this point is right to the other point, false otherwise
     */

    public boolean isRight(Point3D other){
        if (_y > other.getY()){
            return true; 
        }
        return false;    
    }

    /**
     * This method checks if this point is behind the other point
     * @param   other  the point to check whether this point is behind it
     * @return true if this point is behind the other point, false otherwise
     */
    public boolean isBehind(Point3D other){
        if ( _x < other.getX()){
            return true;  
        }
        return false;
    }

    /**
     * This method checks if this point is in front the other point
     * @param   other  the point to check whether this point is in front it
     * @return true if this point is in front the other point, false otherwise
     */
    public boolean isInFrontOf(Point3D other){   
        if ( _x > other.getX()){
            return true;  
        }
        return false;    
    }  

    /**
     * This method moves the Point3D in location (x,y,z), by dx along the x axis, by dy along the y axis and dz along the z axis 
     * so that it now represents the Point3D in the following 3D coordintes (x+dx,y+dy,z+dz).
     *
     * @param   dx  the addtion for coordinate x value
     * @param   dy  the addtion for coordinate y value
     * @param   dz  the addtion for coordinate z value
     */
    public void move (double dx, double dy, double dz){
        _x = _x + dx;
        _y = _y + dy; 
        _z = _z + dz;      
    }

    /**
     * This method calculets the distance between this point and other point p
     *
     * @param   p  the other point
     * @return the distance between this point and other point p
     */
    public double distance (Point3D p){
        double dis = Math.sqrt(Math.pow(p.getX()- _x,2)+ Math.pow(p.getY() - _y,2)+ Math.pow (p.getZ() - _z,2));
        return dis;
    }

    
    
    
    
}
